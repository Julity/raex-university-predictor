# app/main.py
import streamlit as st
import pandas as pd
import sys
import os
import io

#sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "src")))

import logging
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ –º—ã –∑–∞–ø—É—â–µ–Ω—ã
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ú—ã –≤ –ø–∞–ø–∫–µ app/ (Streamlit Cloud)
    if os.path.basename(current_dir) == 'app':
        src_path = os.path.join(current_dir, '..', 'src')
        models_path = os.path.join(current_dir, '..', 'models')
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ú—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)  
    else:
        src_path = os.path.join(current_dir, 'src')
        models_path = os.path.join(current_dir, 'models')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    sys.path.insert(0, os.path.abspath(src_path))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
    if not os.path.exists(models_path):
        logging.warning(f"–ü–∞–ø–∫–∞ models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_path}")
    
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π: {e}")

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from config import feature_order, russian_name
    from predictor import RAPredictor
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
st.set_page_config(page_title="üéì RAEX Rank Predictor", layout="wide")
st.title("üéì RAEX Rank Predictor - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è
@st.cache_resource
def load_predictor():
    try:
        return RAPredictor()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

predictor = load_predictor()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞
def process_csv_file(uploaded_file):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
        for encoding in ['utf-8', 'cp1251', 'windows-1251']:
            try:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, encoding=encoding)
                break
            except UnicodeDecodeError:
                continue
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å UTF-8 –∏–ª–∏ Windows-1251)")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing_features = set(feature_order) - set(df.columns)
        if missing_features:
            st.error(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
            st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–ø–µ—Ä–≤—ã–π –≤—É–∑) –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        sample_data = df.iloc[0][feature_order].to_dict()
        
        st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        st.info(f"üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –≤—É–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        
        return sample_data, df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
st.sidebar.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—É–∑–æ–≤", 
    type=['csv'],
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ 42 –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –¥–∞–Ω–Ω—ã—Ö CSV
if 'csv_data' not in st.session_state:
    st.session_state.csv_data = {}
if 'use_csv' not in st.session_state:
    st.session_state.use_csv = False
if 'bmstu_loaded' not in st.session_state:
    st.session_state.bmstu_loaded = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
if uploaded_file is not None:
    result = process_csv_file(uploaded_file)
    if result:
        csv_data, full_df = result
        st.session_state.csv_data = csv_data
        st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ CSV –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö"):
            st.sidebar.write("**–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:**")
            st.sidebar.dataframe(full_df.head())
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
        if st.sidebar.button("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV"):
            st.session_state.use_csv = True
            st.rerun()

# # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ë–∞—É–º–∞–Ω–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
# if st.sidebar.button("üéØ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞ (2023)"):
#     # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ë–∞—É–º–∞–Ω–∫–∏
#     bmstu_data = {
#         # –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
#         'egescore_avg': 80.83, 'egescore_contract': 71.98, 'egescore_min': 54.55,
#         'olympiad_winners': 8, 'olympiad_other': 236, 'competition': 5.0,
#         # –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–µ–º –∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞
#         'target_admission_share': 13.59, 'target_contract_in_tech': 20.37,
#         'magistracy_share': 10.30, 'aspirantura_share': 2.70,
#         'external_masters': 98.72, 'external_grad_share': 47.70,
#         'aspirants_per_100_students': 3.70,
#         # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
#         'foreign_students_share': 5.71, 'foreign_non_cis': 3.70, 'foreign_cis': 2.01,
#         'foreign_graduated': 7.66, 'mobility_outbound': 0.07,
#         'foreign_staff_share': 0.22, 'foreign_professors': 0,
#         # –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
#         'niokr_total': 3982904.40, 'niokr_share_total': 22.40, 'niokr_own_share': 84.29,
#         'niokr_per_npr': 1919.01, 'scopus_publications': 160.44, 'risc_publications': 160.44,
#         'risc_citations': 409.68, 'foreign_niokr_income': 0.00, 'journals_published': 13,
#         'grants_per_100_npr': 2.84,
#         # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
#         'foreign_edu_income': 31664.10, 'total_income_per_student': 827.28,
#         'self_income_per_npr': 1939.98, 'self_income_share': 22.59,
#         'ppc_salary_index': 200.57, 'avg_salary_grads': 100.0,
#         # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–∞–¥—Ä—ã
#         'npr_with_degree_percent': 62.89, 'npr_per_100_students': 5.77,
#         'young_npr_share': 13.63, 'lib_books_per_student': 106.41,
#         'area_per_student': 10.36, 'pc_per_student': 0.36
#     }
    
#     st.session_state.csv_data = bmstu_data
#     st.session_state.use_csv = True
#     st.session_state.bmstu_loaded = True
#     st.rerun()

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("input_form"):
    st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—É–∑—É:")
    input_data = {}
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    use_csv_data = st.session_state.get("use_csv", False)
    csv_defaults = st.session_state.get("csv_data", {})
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if use_csv_data and csv_defaults:
        if st.session_state.get("bmstu_loaded", False):
            st.info("üéØ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞ –∑–∞ 2023 –≥–æ–¥")
        else:
            st.info("üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
    
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    st.subheader("üìä –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    academic_features = [
        'egescore_avg', 'egescore_contract', 'egescore_min', 
        'olympiad_winners', 'olympiad_other', 'competition'
    ]
    for feat in academic_features:
        if feat in feature_order:
            default_val = csv_defaults.get(feat, 60.0 if "egescore" in feat else (10 if "olympiad" in feat else 5.0))
            if "egescore" in feat:
                input_data[feat] = st.slider(russian_name(feat), 0.0, 120.0, float(default_val), step=0.1, 
                                            key=f"slider_academic_{feat}",
                                            help="–ú–∞–∫—Å–∏–º—É–º 120 –¥–ª—è —É—á–µ—Ç–∞ –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫–æ–≤ —Å 100+ –±–∞–ª–ª–∞–º–∏")
            elif "olympiad" in feat:
                input_data[feat] = st.number_input(russian_name(feat), 0, 5000, int(default_val), 
                                                key=f"num_academic_{feat}",
                                                help="–î–æ 5000 —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –≤—É–∑–æ–≤")
            elif feat == "competition":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 100.0, float(default_val), step=0.1, 
                                            key=f"slider_competition",
                                            help="–ö–æ–Ω–∫—É—Ä—Å –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 100 —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –≤—É–∑–∞—Ö")

    st.subheader("üéØ –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–µ–º –∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")
    target_features = [
        'target_admission_share', 'target_contract_in_tech',
        'magistracy_share', 'aspirantura_share', 'external_masters', 
        'external_grad_share', 'aspirants_per_100_students'
    ]
    for feat in target_features:
        if feat in feature_order:
            default_val = csv_defaults.get(feat, 10.0 if "share" in feat else (2.0 if "aspirants" in feat else 15.0))
            if "share" in feat or "percent" in feat:
                input_data[feat] = st.slider(russian_name(feat), 0.0, 200.0, float(default_val), step=0.1, 
                                            key=f"slider_target_{feat}",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
            elif feat == "aspirants_per_100_students":
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 100.0, float(default_val), step=0.1, 
                                                key=f"num_aspirants",
                                                help="–î–æ 100 –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –Ω–∞ 100 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—É–∑–æ–≤")
            elif feat == "external_masters":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 200.0, float(default_val), step=0.1, 
                                            key=f"slider_external_masters",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
            elif feat == "target_contract_in_tech":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 200.0, float(default_val), step=0.1, 
                                            key=f"slider_target_contract",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")

    st.subheader("üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    international_features = [
        'foreign_students_share', 'foreign_non_cis', 'foreign_cis', 
        'foreign_graduated', 'mobility_outbound', 'foreign_staff_share', 
        'foreign_professors'
    ]
    for feat in international_features:
        if feat in feature_order:
            default_val = csv_defaults.get(feat, 5.0 if "share" in feat else (2 if feat == "foreign_professors" else 2.0))
            if "share" in feat or "percent" in feat:
                input_data[feat] = st.slider(russian_name(feat), 0.0, 150.0, float(default_val), step=0.1, 
                                            key=f"slider_int_{feat}",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
            elif feat == "foreign_professors":
                input_data[feat] = st.number_input(russian_name(feat), 0, 5000, int(default_val), 
                                                key=f"num_foreign_professors",
                                                help="–î–æ 5000 –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≤—É–∑–æ–≤")
            elif feat == "foreign_non_cis":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 150.0, float(default_val), step=0.1, 
                                            key=f"slider_foreign_non_cis",
                                            help="–î–æ–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤ –≤–Ω–µ –°–ù–ì –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≤—É–∑–∞—Ö")
            elif feat == "foreign_cis":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 150.0, float(default_val), step=0.1, 
                                            key=f"slider_foreign_cis",
                                            help="–î–æ–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤ –∏–∑ –°–ù–ì")
            elif feat == "foreign_graduated":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 150.0, float(default_val), step=0.1, 
                                            key=f"slider_foreign_graduated",
                                            help="–î–æ–ª—è –æ–∫–æ–Ω—á–∏–≤—à–∏—Ö –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤")
            elif feat == "mobility_outbound":
                input_data[feat] = st.slider(russian_name(feat), 0.0, 150.0, float(default_val), step=0.1, 
                                            key=f"slider_mobility_outbound",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞—Ö")

    st.subheader("üî¨ –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    research_features = [
        'niokr_total', 'niokr_share_total', 'niokr_own_share', 'niokr_per_npr',
        'scopus_publications', 'risc_publications', 'risc_citations',
        'foreign_niokr_income', 'journals_published', 'grants_per_100_npr'
    ]
    for feat in research_features:
        if feat in feature_order:
            if "share" in feat or "percent" in feat:
                default_val = csv_defaults.get(feat, 15.0)
                input_data[feat] = st.slider(russian_name(feat), 0.0, 200.0, float(default_val), step=0.1, 
                                            key=f"slider_research_{feat}",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
            elif feat == "niokr_total":
                default_val = csv_defaults.get(feat, 50000.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 50000000.0, float(default_val), step=100000.0, 
                                                key=f"num_niokr_total",
                                                help="–î–æ 50 –º–ª–Ω —Ä—É–±. –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            elif feat == "niokr_per_npr":
                default_val = csv_defaults.get(feat, 200.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 500000.0, float(default_val), step=1000.0, 
                                                key=f"num_niokr_per_npr",
                                                help="–î–æ 500 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –≤–µ–¥—É—â–∏—Ö –Ω–∞—É—á–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö")
            elif "publications" in feat:
                default_val = csv_defaults.get(feat, 100)
                max_val = 100000 if feat == "scopus_publications" else 500000
                input_data[feat] = st.number_input(russian_name(feat), 0, max_val, int(default_val), 
                                                key=f"num_{feat}",
                                                help=f"–î–æ {max_val} –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤")
            elif "citations" in feat:
                default_val = csv_defaults.get(feat, 500)
                input_data[feat] = st.number_input(russian_name(feat), 0, 1000000, int(default_val), 
                                                key=f"num_{feat}",
                                                help="–î–æ 1 –º–ª–Ω —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–µ–¥—É—â–∏—Ö –Ω–∞—É—á–Ω—ã—Ö —à–∫–æ–ª")
            elif "income" in feat:
                default_val = csv_defaults.get(feat, 10000.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 100000000.0, float(default_val), step=100000.0, 
                                                key=f"num_{feat}",
                                                help="–î–æ 100 –º–ª–Ω —Ä—É–±. –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
            elif feat == "journals_published":
                default_val = csv_defaults.get(feat, 2)
                input_data[feat] = st.number_input(russian_name(feat), 0, 500, int(default_val), 
                                                key=f"num_journals",
                                                help="–î–æ 500 –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–¥–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
            elif feat == "grants_per_100_npr":
                default_val = csv_defaults.get(feat, 5.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 500.0, float(default_val), step=1.0, 
                                                key=f"num_grants",
                                                help="–î–æ 500 –≥—Ä–∞–Ω—Ç–æ–≤ –Ω–∞ 100 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—É–∑–∞—Ö")

    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    financial_features = [
        'foreign_edu_income', 'total_income_per_student', 'self_income_per_npr',
        'self_income_share', 'ppc_salary_index', 'avg_salary_grads'
    ]
    for feat in financial_features:
        if feat in feature_order:
            default_val = csv_defaults.get(feat, 100.0 if "share" in feat or "index" in feat else 100000.0)
            if "share" in feat or "percent" in feat or "index" in feat:
                input_data[feat] = st.slider(russian_name(feat), 0.0, 500.0, float(default_val), step=1.0, 
                                            key=f"slider_finance_{feat}",
                                            help="–ú–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 500% –¥–ª—è –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
            elif "income" in feat or "salary" in feat:
                max_val = 10000000.0 if feat == "total_income_per_student" else 5000000.0
                step_val = 10000.0 if feat == "total_income_per_student" else 5000.0
                input_data[feat] = st.number_input(russian_name(feat), 0.0, max_val, float(default_val), step=step_val, 
                                                key=f"num_finance_{feat}",
                                                help=f"–î–æ {max_val:,.0f} —Ä—É–±. –¥–ª—è –≤–µ–¥—É—â–∏—Ö –≤—É–∑–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏")

    st.subheader("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–∞–¥—Ä—ã")
    infrastructure_features = [
        'npr_with_degree_percent', 'npr_per_100_students', 'young_npr_share',
        'lib_books_per_student', 'area_per_student', 'pc_per_student'
    ]
    for feat in infrastructure_features:
        if feat in feature_order:
            if "share" in feat or "percent" in feat:
                default_val = csv_defaults.get(feat, 60.0)
                input_data[feat] = st.slider(russian_name(feat), 0.0, 200.0, float(default_val), step=0.1, 
                                            key=f"slider_infra_{feat}",
                                            help="–ú–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100% –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ñ–µ–¥—Ä")
            elif feat == "npr_per_100_students":
                default_val = csv_defaults.get(feat, 8.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 100.0, float(default_val), step=0.1, 
                                                key=f"num_npr_per_100",
                                                help="–î–æ 100 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 100 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ/–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–µ")
            elif feat == "lib_books_per_student":
                default_val = csv_defaults.get(feat, 100)
                input_data[feat] = st.number_input(russian_name(feat), 0, 5000, int(default_val), 
                                                key=f"num_lib_books",
                                                help="–î–æ 5000 –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≤—É–∑–∞—Ö —Å –±–æ–≥–∞—Ç—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
            elif feat == "area_per_student":
                default_val = csv_defaults.get(feat, 15.0)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 500.0, float(default_val), step=1.0, 
                                                key=f"num_area",
                                                help="–î–æ 500 –º¬≤ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–∞–º–ø—É—Å–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö")
            elif feat == "pc_per_student":
                default_val = csv_defaults.get(feat, 0.5)
                input_data[feat] = st.number_input(russian_name(feat), 0.0, 10.0, float(default_val), step=0.1, 
                                                key=f"num_pc",
                                                help="–î–æ 10 –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ IT-–≤—É–∑–∞—Ö")
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    submitted = st.form_submit_button("üî¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
if submitted:
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    current_data = {}
    for feat in feature_order:
        if feat in input_data:
            current_data[feat] = input_data[feat]
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if "share" in feat or "percent" in feat:
                current_data[feat] = 10.0
            else:
                current_data[feat] = 100.0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º input_data –≤—Å–µ–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    input_data = current_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_features = set(feature_order) - set(input_data.keys())
    if missing_features:
        st.error(f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã")
        st.stop()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if submitted and predictor is not None:
    st.session_state["input_data"] = input_data
    st.session_state["submitted"] = True
    st.session_state["use_csv"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSV
    st.session_state["bmstu_loaded"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ë–∞—É–º–∞–Ω–∫–∏
    
    

    user_df = pd.DataFrame([input_data])
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for feat in feature_order:
        if feat not in user_df.columns:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫: {feat}")
            st.stop()
    
    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ feature_order
    user_df = user_df[feature_order]
    
    with st.spinner("–í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥..."):
        try:
            rank = predictor.predict_rank(user_df)
            st.session_state["current_rank"] = rank
            st.success(f"üèÜ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ: **{rank:.1f}**")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            st.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
if st.session_state.get("submitted", False) and predictor is not None and "current_rank" in st.session_state:
    st.markdown("---")
    st.subheader("üéØ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
    
    current_rank = st.session_state["current_rank"]
    st.write(f"–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: **{current_rank:.1f}**")
    
    desired_top = st.slider("–í –∫–∞–∫–æ–π —Ç–æ–ø –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å?", 1, 100, min(20, int(current_rank)), key="desired_top")
    
    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∏
    improvement_options = {
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [
            'egescore_avg',           #  –°–†–ï–î–ù–ò–ô –ë–ê–õ–õ –ï–ì–≠ - –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
            'olympiad_winners',       #  –ü–û–ë–ï–î–ò–¢–ï–õ–ò –û–õ–ò–ú–ü–ò–ê–î - –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ —à–∫–æ–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥
            'competition',            #  –ö–û–ù–ö–£–†–° –ù–ê –ú–ï–°–¢–û - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø—Ä–∏–µ–º–∞
            'target_admission_share', #  –¶–ï–õ–ï–í–û–ô –ü–†–ò–ï–ú - —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏, –≥–æ—Å–∑–∞–∫–∞–∑
            'magistracy_share',       #  –î–û–õ–Ø –ú–ê–ì–ò–°–¢–†–ê–¢–£–†–´ - —Ä–∞–∑–≤–∏—Ç–∏–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
            'external_masters'        #  –ú–ê–ì–ò–°–¢–†–ê–ù–¢–´ –ò–ó –î–†–£–ì–ò–• –í–£–ó–û–í - –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        ],
        "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å": [
            'foreign_students_share',    #  –ò–ù–û–°–¢–†–ê–ù–ù–´–ï –°–¢–£–î–ï–ù–¢–´ - —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥, –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤–∏–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            'foreign_professors',        #  –ò–ù–û–°–¢–†–ê–ù–ù–´–ï –ü–†–û–§–ï–°–°–û–†–ê - –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã
            'mobility_outbound',         #  –°–¢–ê–ñ–ò–†–û–í–ö–ò –ó–ê –†–£–ë–ï–ñ–û–ú - –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –≤—É–∑–∞–º–∏, –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±–º–µ–Ω–∞
            'foreign_edu_income',        #  –î–û–•–û–î–´ –û–¢ –ò–ù–û–°–¢–†–ê–ù–¶–ï–í - –ø–ª–∞—Ç–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤
            'foreign_niokr_income'       #  –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ï –ù–ò–û–ö–† - —É—á–∞—Å—Ç–∏–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
        ],
        "–ù–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å": [
            'scopus_publications',      # –ü–£–ë–õ–ò–ö–ê–¶–ò–ò SCOPUS - –≥—Ä–∞–Ω—Ç—ã –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            'niokr_total',              #  –û–ë–™–ï–ú –ù–ò–û–ö–† - –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä–∞–Ω—Ç–∞—Ö, —Ö–æ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            'grants_per_100_npr',       #  –ì–†–ê–ù–¢–´ –ù–ê –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø - –æ–±—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–æ–∫, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω—Ç—ã
            'journals_published',       #  –ù–ê–£–ß–ù–´–ï –ñ–£–†–ù–ê–õ–´ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤, –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º—ã—Ö –≤ –±–∞–∑–∞—Ö
            'risc_publications'         #  –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –†–ò–ù–¶ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏–π
        ],
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [
            'total_income_per_student',  # –î–û–•–û–î –ù–ê –°–¢–£–î–ï–ù–¢–ê - –ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏, —ç–Ω–¥–∞—É–º–µ–Ω—Ç-—Ñ–æ–Ω–¥—ã, –∫–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫
            'self_income_per_npr',       #  –•–û–ó–†–ê–°–ß–ï–¢ –ù–ê –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥
            'self_income_share',         #  –î–û–õ–Ø –í–ù–ï–ë–Æ–î–ñ–ï–¢–ù–´–• –î–û–•–û–î–û–í - —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥

        ],
        "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–∞–¥—Ä—ã": [
            'npr_with_degree_percent',   #  –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò –° –£–ß–ï–ù–û–ô –°–¢–ï–ü–ï–ù–¨–Æ - –ø—Ä–æ–≥—Ä–∞–º–º—ã –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞—â–∏—Ç—ã
            'young_npr_share',           #  –ú–û–õ–û–î–´–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò - –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –º–æ–ª–æ–¥—ã—Ö —É—á–µ–Ω—ã—Ö
            'area_per_student',          #  –ü–õ–û–©–ê–î–¨ –ù–ê –°–¢–£–î–ï–ù–¢–ê - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–µ–Ω–æ–≤–∞—Ü–∏—è, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            'pc_per_student',            #  –ö–û–ú–ü–¨–Æ–¢–ï–†–´ –ù–ê –°–¢–£–î–ï–ù–¢–ê - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–∫–∞
            'lib_books_per_student'      #  –ë–ò–ë–õ–ò–û–¢–ï–ß–ù–´–ô –§–û–ù–î - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        ]

    }
    
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    selected_groups = st.multiselect(
        "–ì—Ä—É–ø–ø—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π",
        options=list(improvement_options.keys()),
        default=list(improvement_options.keys())
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    allowed_features = []
    for group in selected_groups:
        allowed_features.extend(improvement_options[group])
    
    if st.button("üîÑ –ù–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", key="improve_btn"):
        user_df = pd.DataFrame([st.session_state["input_data"]])
        user_df = user_df[feature_order]  # –£–±–µ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è..."):
            try:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ suggest_improvement
                recommendations, improved_rank = predictor.suggest_improvement(
                    user_df,
                    desired_top,
                    current_rank=current_rank,
                    allowed_features=allowed_features
                )
                
                st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                
                if improved_rank <= desired_top:
                    st.success(f"üéâ –ú–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å —Ç–æ–ø–∞-{desired_top}! –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–≥ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π: {improved_rank:.1f}")
                else:
                    st.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–ø–∞-{desired_top} –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–≥ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π: {improved_rank:.1f}")
                
                if recommendations:
                    st.markdown("üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for i, (feat, old, new) in enumerate(recommendations, 1):
                        percent_change = ((new - old) / old * 100) if old > 0 else 0
                        col1, col2, col3 = st.columns([2, 1, 1])
                        with col1:
                            st.write(f"**{i}. {russian_name(feat)}**")
                        with col2:
                            st.write(f"`{old:.2f} ‚Üí {new:.2f}`")
                        with col3:
                            st.write(f"`({percent_change:+.1f}%)`")
                        
                        progress_value = min(100, max(0, percent_change / 2 + 50))
                        st.progress(progress_value / 100)
                else:
                    st.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

elif predictor is None:
    st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –ø–∞–ø–∫–µ 'models/'")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
   
    st.header("üìÅ –§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞")
    st.write("""
    CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏:
    - –í—Å–µ 42 –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    - –î–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8 –∏–ª–∏ Windows-1251
    """)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ CSV
    @st.cache_data
    def create_template_csv():
        template_df = pd.DataFrame(columns=feature_order)
        template_df.loc[0] = [0] * len(feature_order)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–ª—è–º–∏
        return template_df.to_csv(index=False, encoding='utf-8')
    
    template_csv = create_template_csv()
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV",
        data=template_csv,
        file_name="raex_template.csv",
        mime="text/csv",
        help="–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"):
        st.session_state.use_csv = False
        st.session_state.csv_data = {}
        st.session_state.bmstu_loaded = False
        st.session_state.submitted = False
        st.rerun()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"):
        st.write("**–í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:**", len(feature_order))
        for i, feat in enumerate(feature_order, 1):
            st.write(f"{i}. {russian_name(feat)} ({feat})")